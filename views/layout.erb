<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>Go3 3-player hexagonal Go game</title>
  <script>
    // Generated by CoffeeScript 1.9.1
    var BoardBase, BoardLines, BoardStats, CanvasHelper, add_stones, get_init_legal_moves, legal_move, reset, start, update_legal_moves;

    BoardStats = (function() {
      function BoardStats(main_object) {
        this.controller = main_object;
        this.row_start = [1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6];
        this.row_end = [6, 7, 8, 9, 10, 11, 11, 11, 11, 11, 11];
        this.w_e = [[[1, 1], [6, 1]], [[1, 2], [7, 2]], [[1, 3], [8, 3]], [[1, 4], [9, 4]], [[1, 5], [10, 5]], [[1, 6], [11, 6]], [[2, 7], [11, 7]], [[3, 8], [11, 8]], [[4, 9], [11, 9]], [[5, 10], [11, 10]], [[6, 11], [11, 11]]];
        this.sw_ne = [[[1, 6], [1, 1]], [[2, 7], [2, 1]], [[3, 8], [3, 1]], [[4, 9], [4, 1]], [[5, 10], [5, 1]], [[6, 11], [6, 1]], [[7, 11], [7, 2]], [[8, 11], [8, 3]], [[9, 11], [9, 4]], [[10, 11], [10, 5]], [[11, 11], [11, 6]]];
        this.nw_se = [[[1, 6], [6, 11]], [[1, 5], [7, 11]], [[1, 4], [8, 11]], [[1, 3], [9, 11]], [[1, 2], [10, 11]], [[1, 1], [11, 11]], [[2, 1], [11, 10]], [[3, 1], [11, 9]], [[4, 1], [11, 8]], [[5, 1], [11, 7]], [[6, 1], [11, 6]]];
      }

      return BoardStats;

    })();

    CanvasHelper = (function() {
      function CanvasHelper() {
        this.canvas = document.getElementById('go-board');
        this.context = this.canvas.getContext('2d');
        this.board = new BoardStats();
        this.board_base = new BoardBase(this);
        this.board_lines = new BoardLines(this);
      }

      CanvasHelper.prototype.get_x = function(ab) {
        return 150 + 50 * ab[0] - 25 * ab[1];
      };

      CanvasHelper.prototype.get_y = function(ab) {
        return 6 + 44 * ab[1];
      };

      CanvasHelper.prototype.get_point = function(x, y) {
        var a, b, dx, dy, in_bounds, point, r2;
        point = [];
        a = -1;
        b = -1;
        r2 = 999;
        in_bounds = true;
        b = Math.floor((y - 28) / 44) + 1;
        a = Math.floor((x - 125 + 25 * b) / 50);
        if (b < 1) {
          in_bounds = false;
        }
        if (b > 11) {
          in_bounds = false;
        }
        if (a < this.board.row_start[b - 1]) {
          in_bounds = false;
        }
        if (a > this.board.row_end[b - 1]) {
          in_bounds = false;
        }
        dx = Math.abs(x - this.get_x([a, b]));
        dy = Math.abs(y - this.get_y([a, b]));
        r2 = dx * dx + dy * dy;
        if (r2 > 530) {
          in_bounds = false;
        }
        if (in_bounds === true) {
          point = [a, b];
        }
        return point;
      };

      CanvasHelper.prototype.draw_stone = function(ab, color) {
        this.context.strokeStyle = "#000000";
        this.context.lineWidth = 2;
        this.context.fillStyle = this.get_rgb(color);
        this.context.beginPath();
        this.context.arc(this.get_x(ab), this.get_y(ab), 17, 0, 2 * Math.PI, false);
        this.context.fill();
        this.context.stroke();
        this.context.closePath();
        this.context.beginPath();
        this.context.strokeStyle = "#cc9933";
        this.context.arc(this.get_x(ab), this.get_y(ab), 19, 0, 2 * Math.PI, false);
        this.context.stroke();
        return this.context.closePath();
      };

      CanvasHelper.prototype.get_rgb = function(color) {
        var clr;
        switch (color) {
          case "red":
            clr = "#cc3333";
            break;
          case "white":
            clr = "#f0f0f0";
            break;
          case "blue":
            clr = "#5050cc";
        }
        return clr;
      };

      CanvasHelper.prototype.remove_stone = function(ab) {
        var xx, yy;
        xx = this.get_x(ab);
        yy = this.get_y(ab);
        this.context.beginPath();
        this.context.fillStyle = "#cc9933";
        this.context.arc(xx, yy, 19, 0, 2 * Math.PI, false);
        this.context.fill();
        this.context.closePath();
        this.context.beginPath();
        this.context.strokeStyle = "#000000";
        this.context.lineWidth = 3;
        this.context.moveTo(xx - 11, yy - 19);
        this.context.lineTo(xx + 11, yy + 19);
        this.context.stroke();
        this.context.moveTo(xx + 11, yy - 19);
        this.context.lineTo(xx - 11, yy + 19);
        this.context.stroke();
        this.context.moveTo(xx - 20, yy);
        this.context.lineTo(xx + 20, yy);
        this.context.stroke();
        return this.context.closePath();
      };

      CanvasHelper.prototype.redraw = function(stones) {
        var ab, color, points, results;
        this.board_base.draw_base();
        this.board_lines.draw_lines();
        results = [];
        for (color in stones) {
          points = stones[color];
          results.push((function() {
            var k, len, results1;
            results1 = [];
            for (k = 0, len = points.length; k < len; k++) {
              ab = points[k];
              results1.push(this.draw_stone(ab, color));
            }
            return results1;
          }).call(this));
        }
        return results;
      };

      return CanvasHelper;

    })();

    BoardBase = (function() {
      function BoardBase(board_canvas) {
        this.b_canvas = board_canvas;
        this.board = this.b_canvas.board;
        this.draw_base();
      }

      BoardBase.prototype.draw_base = function() {
        var canvas;
        canvas = document.getElementById('go-board');
        this.context = canvas.getContext('2d');
        this.draw_base_hex();
        return this.draw_base_margin();
      };

      BoardBase.prototype.draw_base_hex = function() {
        this.context.strokeStyle = "#000000";
        this.context.lineWidth = 5;
        this.context.fillStyle = "#cc9933";
        this.context.beginPath();
        this.context.moveTo(157, 26);
        this.context.lineTo(443, 26);
        this.context.lineTo(576, 270);
        this.context.lineTo(443, 514);
        this.context.lineTo(157, 514);
        this.context.lineTo(25, 270);
        this.context.lineTo(157, 26);
        this.context.fill();
        this.context.stroke();
        return this.context.closePath();
      };

      BoardBase.prototype.draw_base_margin = function() {
        this.context.strokeStyle = "#000000";
        this.context.lineWidth = 3;
        this.context.beginPath();
        this.context.moveTo(163, 34);
        this.context.lineTo(437, 34);
        this.context.lineTo(567, 270);
        this.context.lineTo(437, 506);
        this.context.lineTo(163, 506);
        this.context.lineTo(33, 270);
        this.context.lineTo(163, 34);
        this.context.stroke();
        return this.context.closePath();
      };

      return BoardBase;

    })();

    BoardLines = (function() {
      function BoardLines(board_canvas) {
        this.b_canvas = board_canvas;
        this.board = this.b_canvas.board;
        this.draw_lines();
      }

      BoardLines.prototype.draw_lines = function() {
        this.draw_w_e_lines();
        this.draw_sw_ne_lines();
        return this.draw_nw_se_lines();
      };

      BoardLines.prototype.draw_w_e_lines = function() {
        var i, k, results;
        results = [];
        for (i = k = 0; k <= 10; i = ++k) {
          results.push(this.draw_line(this.board.w_e[i][0], this.board.w_e[i][1]));
        }
        return results;
      };

      BoardLines.prototype.draw_sw_ne_lines = function() {
        var i, k, results;
        results = [];
        for (i = k = 0; k <= 10; i = ++k) {
          results.push(this.draw_line(this.board.sw_ne[i][0], this.board.sw_ne[i][1]));
        }
        return results;
      };

      BoardLines.prototype.draw_nw_se_lines = function() {
        var i, k, results;
        results = [];
        for (i = k = 0; k <= 10; i = ++k) {
          results.push(this.draw_line(this.board.nw_se[i][0], this.board.nw_se[i][1]));
        }
        return results;
      };

      BoardLines.prototype.draw_line = function(beg, end) {
        var canvas, context;
        canvas = document.getElementById('go-board');
        context = canvas.getContext('2d');
        context.strokeStyle = "#000000";
        context.lineWidth = 3;
        context.beginPath();
        context.moveTo(this.b_canvas.get_x(beg), this.b_canvas.get_y(beg));
        context.lineTo(this.b_canvas.get_x(end), this.b_canvas.get_y(end));
        context.stroke();
        return context.closePath();
      };

      return BoardLines;

    })();

    this.mousedown = function(e) {
      var dx, dy, msg_out, obj_out, point, px, py, url, x, xhr, y;
      this.canvas = document.getElementById('go-board');
      dx = this.canvas.offsetLeft;
      dy = this.canvas.offsetTop;
      px = e.pageX;
      py = e.pageY;
      x = px - dx;
      y = py - dy;
      point = this.canvas_helper.get_point(x, y);
      if (legal_move(point)) {
        this.canvas_helper.draw_stone(point, "red");
        obj_out = {
          red_move: point,
          new_game: this.newgame
        };
        msg_out = JSON.stringify(obj_out);
        xhr = new XMLHttpRequest();
        url = "/make-a-move";
        xhr.open('POST', url);
        xhr.onreadystatechange = function() {
          var msg_in, response;
          if (xhr.readyState === 4 && xhr.status === 200) {
            msg_in = xhr.responseText;
            response = JSON.parse(msg_in);
            add_stones(response);
            return update_legal_moves(response.legal_red_moves);
          }
        };
        xhr.send(msg_out);
        return this.newgame = "no";
      }
    };

    legal_move = function(point) {
      return this.legal_moves.some(function(p) {
        return p[0] === point[0] && p[1] === point[1];
      });
    };

    get_init_legal_moves = function() {
      var i, j, k, l, legal_moves, pp, ref, ref1;
      legal_moves = [];
      for (i = k = 0; k <= 10; i = ++k) {
        for (j = l = ref = this.canvas_helper.board.row_start[i], ref1 = this.canvas_helper.board.row_end[i]; ref <= ref1 ? l <= ref1 : l >= ref1; j = ref <= ref1 ? ++l : --l) {
          pp = [];
          pp[0] = j;
          pp[1] = i + 1;
          legal_moves.push(pp);
        }
      }
      return legal_moves;
    };

    add_stones = function(response) {
      var stones;
      if (response.stones === void 0) {
        this.canvas_helper.draw_stone(response.white_move, "white");
        return this.canvas_helper.draw_stone(response.blue_move, "blue");
      } else {
        stones = JSON.parse(response.stones);
        return reset(stones);
      }
    };

    reset = function(stones) {
      return this.canvas_helper.redraw(stones);
    };

    update_legal_moves = function(legal_moves) {
      return this.legal_moves = legal_moves;
    };

    start = function() {
      this.newgame = "yes";
      this.canvas_helper = new CanvasHelper;
      return this.legal_moves = get_init_legal_moves();
    };

    window.onload = start;

  </script>
</head>

<body>

<%= yield %>

</body>

</html>
